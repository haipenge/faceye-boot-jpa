app.name=faceye-feature-jpa
# Enable debug logs.
debug=false
# Enable trace logs.
trace=false

# LOGGING
# Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback
logging.config=classpath:logback.xml
#logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.
#logging.file= # Log file name. For instance, `myapp.log`
#logging.file.max-history= # Maximum of archive log files to keep. Only supported with the default logback setup.
#logging.file.max-size= # Maximum log file size. Only supported with the default logback setup.
#logging.level.*= # Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`
#logging.path= # Location of the log file. For instance, `/var/log`.
#logging.pattern.console= # Appender pattern for output to the console. Supported only with the default Logback setup.
#logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS # Appender pattern for log date format. Supported only with the default Logback setup.
#logging.pattern.file= # Appender pattern for output to a file. Supported only with the default Logback setup.
#logging.pattern.level= # Appender pattern for log level (default: %5p). Supported only with the default Logback setup.
#logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.

##------------------------------------------------------------END LOG--------------------------------------------------------------


# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
# JDBC URL of the database.
#spring.datasource.jdbc-url=jdbc:mysql://10.12.12.143:33306/faceye_security?useEncode=true&characterEncoding=utf8&useSSL=false
spring.datasource.jdbc-url=jdbc:mysql://10.12.12.143:33306/faceye_security?useEncode=true&characterEncoding=utf8&useSSL=false
# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# Login username of the database.
spring.datasource.username=pro
# Login password of the database.
spring.datasource.password=pro
# Whether to stop if an error occurs while initializing the database.
spring.datasource.continue-on-error=false
#spring.datasource.data= # Data (DML) script resource references.
#spring.datasource.data-username=pro # Username of the database to execute DML scripts (if different).
#spring.datasource.data-password=pro # Password of the database to execute DML scripts (if different).
#spring.datasource.dbcp2.*= # Commons DBCP2 specific settings

#spring.datasource.generate-unique-name=false # Whether to generate a random datasource name.
#spring.datasource.hikari.*= # Hikari specific settings
#spring.datasource.initialization-mode=embedded # Initialize the datasource with available DDL and DML scripts.
#spring.datasource.jmx-enabled=false # Whether to enable JMX support (if provided by the underlying pool).
#spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username & password are ignored when set.
#spring.datasource.name= # Name of the datasource. Default to "testdb" when using an embedded database.

#spring.datasource.platform=all # Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or data-${platform}.sql).
#spring.datasource.schema= # Schema (DDL) script resource references.
#spring.datasource.schema-username= # Username of the database to execute DDL scripts (if different).
#spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).
#spring.datasource.separator=; # Statement separator in SQL initialization scripts.
#spring.datasource.sql-script-encoding= # SQL scripts encoding.
#spring.datasource.tomcat.*= # Tomcat datasource specific settings
#spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.

#spring.datasource.xa.data-source-class-name= # XA datasource fully qualified name.
#spring.datasource.xa.properties= # Properties to pass to the XA data source.

# JDBC (JdbcProperties)
# Number of rows that should be fetched from the database when more rows are needed.
spring.jdbc.template.fetch-size=-1
# Maximum number of rows.
spring.jdbc.template.max-rows=-1
# Query timeout. If a duration suffix is not specified, seconds will be used.
spring.jdbc.template.query-timeout=15

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
# Whether to enable JPA repositories.
spring.data.jpa.repositories.enabled=true
# Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.
spring.jpa.database= MYSQL
 # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
# Whether to initialize the schema on startup.
spring.jpa.generate-ddl=false
# DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Defaults to "create-drop" when using an embedded database and no schema manager was detected. Otherwise, defaults to "none".
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.
#spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.
#spring.jpa.hibernate.use-new-id-generator-mappings= # Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.
#spring.jpa.mapping-resources= # Mapping resources (equivalent to "mapping-file" entries in persistence.xml).
# Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.
spring.jpa.open-in-view=true
#spring.jpa.properties.*= # Additional native properties to set on the JPA provider.
# Whether to enable logging of SQL statements.
spring.jpa.show-sql=false

#--------------------------------------------------------END DB ------------------------------------------------------------

# SPRING MVC (WebMvcProperties)
# Amount of time before asynchronous request handling times out.
#spring.mvc.async.request-timeout= 
# Whether a request parameter ("format" by default) should be used to determine the requested media type.
spring.mvc.contentnegotiation.favor-parameter=false 
# Whether the path extension in the URL path should be used to determine the requested media type.
spring.mvc.contentnegotiation.favor-path-extension=false 
# Maps file extensions to media types for content negotiation.
#spring.mvc.contentnegotiation.media-types.*= 
# Query parameter name to use when "favor-parameter" is enabled.
#spring.mvc.contentnegotiation.parameter-name= 
# Date format to use. For instance, `dd/MM/yyyy`.
spring.mvc.date-format= yyyy-MM-dd
# Whether to dispatch TRACE requests to the FrameworkServlet doService method.
spring.mvc.dispatch-trace-request=false 
# Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.
spring.mvc.dispatch-options-request=true 
# Whether to enable resolution of favicon.ico.
spring.mvc.favicon.enabled=true 
# Whether to enable Spring's HttpPutFormContentFilter.
spring.mvc.formcontent.putfilter.enabled=true 
# Whether the content of the "default" model should be ignored during redirect scenarios.
spring.mvc.ignore-default-model-on-redirect=true 
# Locale to use. By default, this locale is overridden by the "Accept-Language" header.
#spring.mvc.locale= 
# Define how the locale should be resolved.
spring.mvc.locale-resolver=accept-header 
# Whether to enable warn logging of exceptions resolved by a "HandlerExceptionResolver".
spring.mvc.log-resolved-exception=false 
# Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.
#spring.mvc.message-codes-resolver-format= 
# Whether suffix pattern matching should work only against extensions registered with "spring.mvc.contentnegotiation.media-types.*".
spring.mvc.pathmatch.use-registered-suffix-pattern=false 
# Whether to use suffix pattern match (".*") when matching patterns to requests.
spring.mvc.pathmatch.use-suffix-pattern=false 
# Load on startup priority of the Spring Web Services servlet.
spring.mvc.servlet.load-on-startup=-1 
# Path pattern used for static resources.
spring.mvc.static-path-pattern=/** 
# Whether a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.
spring.mvc.throw-exception-if-no-handler-found=false 
# Spring MVC view prefix.
#spring.mvc.view.prefix= /
spring.mvc.view.prefix= src/main/webapp
# Spring MVC view suffix.
spring.mvc.view.suffix= .jsp

# HTTP message conversion
# Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.
#spring.http.converters.preferred-json-mapper= 

# HTTP encoding (HttpEncodingProperties)
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.charset=UTF-8
# Whether to enable http encoding support.
spring.http.encoding.enabled=true
# Whether to force the encoding to the configured charset on HTTP requests and responses.
#spring.http.encoding.force= 
# Whether to force the encoding to the configured charset on HTTP requests. Defaults to true when "force" has not been specified.
#spring.http.encoding.force-request= 
# Whether to force the encoding to the configured charset on HTTP responses.
#spring.http.encoding.force-response= 
# Locale in which to encode mapping.
#spring.http.encoding.mapping= 

# MULTIPART (MultipartProperties)
# Whether to enable support of multipart uploads.
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.
spring.servlet.multipart.file-size-threshold=0
# Intermediate location of uploaded files.
#spring.servlet.multipart.location= 
# Max file size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.
spring.servlet.multipart.max-file-size=1MB
# Max request size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.
spring.servlet.multipart.max-request-size=10MB
# Whether to resolve the multipart request lazily at the time of file or parameter access.
spring.servlet.multipart.resolve-lazily=false

# JACKSON (JacksonProperties)
# Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
# Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.
#spring.jackson.default-property-inclusion= 
# Jackson on/off features that affect the way Java objects are deserialized.
#spring.jackson.deserialization.*= 
# Jackson on/off features for generators.
#spring.jackson.generator.*= 
# Joda date time format string. If not configured, "date-format" is used as a fallback if it is configured with a format string.
#spring.jackson.joda-date-time-format= 
# Locale used for formatting.
#spring.jackson.locale= 
# Jackson general purpose on/off features.
#spring.jackson.mapper.*=
# Jackson on/off features for parsers. 
#spring.jackson.parser.*=  
# One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.
#spring.jackson.property-naming-strategy= 
# Jackson on/off features that affect the way Java objects are serialized.
#spring.jackson.serialization.*= 
#  Time zone used when formatting dates. For instance, "America/Los_Angeles" or "GMT+10".
#spring.jackson.time-zone= 

# GSON (GsonProperties)
# Format to use when serializing Date objects.
#spring.gson.date-format= 
# Whether to disable the escaping of HTML characters such as '<', '>', etc.
#spring.gson.disable-html-escaping= 
# Whether to exclude inner classes during serialization.
#spring.gson.disable-inner-class-serialization= 
# Whether to enable serialization of complex map keys (i.e. non-primitives).
#spring.gson.enable-complex-map-key-serialization= 
# Whether to exclude all fields from consideration for serialization or deserialization that do not have the "Expose" annotation.
#spring.gson.exclude-fields-without-expose-annotation= 
# Naming policy that should be applied to an object's field during serialization and deserialization.
#spring.gson.field-naming-policy= 
# Whether to generate non executable JSON by prefixing the output with some special text.
#spring.gson.generate-non-executable-json=
# Whether to be lenient about parsing JSON that doesn't conform to RFC 4627. 
#spring.gson.lenient= 
# Serialization policy for Long and long types.
#spring.gson.long-serialization-policy= 
# Whether to output serialized JSON that fits in a page for pretty printing.
#spring.gson.pretty-printing= 
# Whether to serialize null fields.
#spring.gson.serialize-nulls= 